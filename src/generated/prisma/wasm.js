
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  owner: 'owner',
  wallet: 'wallet',
  plugin: 'plugin',
  admin: 'admin',
  logo: 'logo',
  name: 'name',
  info: 'info',
  network: 'network'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  username: 'username',
  amount: 'amount',
  isOneTime: 'isOneTime',
  org_id: 'org_id',
  nextPayout: 'nextPayout',
  created_at: 'created_at',
  updated_at: 'updated_at',
  network: 'network',
  asset: 'asset',
  id: 'id',
  role: 'role',
  title: 'title',
  active: 'active',
  interval: 'interval',
  payout: 'payout'
};

exports.Prisma.StreamScalarFieldEnum = {
  username: 'username',
  amount: 'amount',
  org_id: 'org_id',
  lastPayout: 'lastPayout',
  created_at: 'created_at',
  updated_at: 'updated_at',
  network: 'network',
  asset: 'asset',
  id: 'id',
  payout: 'payout',
  role: 'role',
  title: 'title',
  state: 'state',
  active: 'active',
  interval: 'interval'
};

exports.Prisma.TransactionScalarFieldEnum = {
  tx_id: 'tx_id',
  amount: 'amount',
  asset: 'asset',
  network: 'network',
  created_at: 'created_at',
  recipient: 'recipient',
  org_id: 'org_id',
  username: 'username',
  schedule_id: 'schedule_id',
  stream_id: 'stream_id'
};

exports.Prisma.UserScalarFieldEnum = {
  username: 'username',
  image: 'image',
  name: 'name',
  total_payout: 'total_payout',
  uid: 'uid',
  email: 'email'
};

exports.Prisma.WaitlistScalarFieldEnum = {
  email: 'email',
  name: 'name',
  company: 'company'
};

exports.Prisma.WalletScalarFieldEnum = {
  username: 'username',
  network: 'network',
  address: 'address',
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.interval_type = exports.$Enums.interval_type = {
  daily: 'daily',
  weekly: 'weekly',
  biweekly: 'biweekly',
  monthly: 'monthly',
  quarterly: 'quarterly',
  semiannual: 'semiannual',
  yearly: 'yearly'
};

exports.network_type = exports.$Enums.network_type = {
  Base: 'Base'
};

exports.token = exports.$Enums.token = {
  USDT: 'USDT',
  USDC: 'USDC'
};

exports.stream_state = exports.$Enums.stream_state = {
  inactive: 'inactive',
  active: 'active',
  paused: 'paused',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  organization: 'organization',
  schedule: 'schedule',
  stream: 'stream',
  transaction: 'transaction',
  user: 'user',
  waitlist: 'waitlist',
  wallet: 'wallet'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\olatu\\Documents\\GitHub\\XelmarTech\\Paynest\\paynest-BE\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\olatu\\Documents\\GitHub\\XelmarTech\\Paynest\\paynest-BE\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel organization {\n  id           String        @id\n  owner        String\n  wallet       String        @unique\n  plugin       String        @unique\n  admin        String        @unique\n  logo         String\n  name         String        @unique\n  info         String\n  network      network_type\n  streams      stream[]\n  schedules    schedule[]\n  transactions transaction[]\n}\n\nmodel schedule {\n  username   String\n  amount     Decimal       @db.Decimal(18, 8)\n  isOneTime  Boolean       @default(false)\n  org_id     String\n  nextPayout BigInt\n  created_at DateTime      @default(now())\n  updated_at DateTime      @updatedAt\n  network    network_type\n  asset      token\n  id         String        @id\n  role       String\n  title      String\n  active     Boolean       @default(true)\n  interval   interval_type\n  payout     Decimal       @default(0) @db.Decimal\n\n  user user          @relation(fields: [username], references: [username])\n  org  organization  @relation(fields: [org_id], references: [id])\n  txns transaction[]\n}\n\nmodel stream {\n  username   String\n  amount     Decimal       @db.Decimal(18, 8)\n  org_id     String\n  lastPayout BigInt        @default(dbgenerated(\"(EXTRACT(epoch FROM now()))::bigint\"))\n  created_at DateTime      @default(now())\n  updated_at DateTime      @updatedAt\n  network    network_type\n  asset      token\n  id         String        @id\n  payout     Decimal       @default(0) @db.Decimal\n  role       String\n  title      String\n  state      stream_state  @default(active)\n  active     Boolean       @default(true)\n  interval   interval_type\n\n  user user          @relation(fields: [username], references: [username])\n  org  organization  @relation(fields: [org_id], references: [id])\n  txns transaction[]\n}\n\nmodel transaction {\n  tx_id      String       @id\n  amount     Decimal      @db.Decimal\n  asset      token\n  network    network_type\n  created_at DateTime     @default(now())\n  recipient  String\n\n  org_id      String\n  username    String\n  schedule_id String?\n  stream_id   String?\n\n  org      organization @relation(fields: [org_id], references: [id])\n  user     user         @relation(fields: [username], references: [username])\n  schedule schedule?    @relation(fields: [schedule_id], references: [id])\n  stream   stream?      @relation(fields: [stream_id], references: [id])\n}\n\nmodel user {\n  username     String?       @unique\n  image        String?\n  name         String?\n  total_payout Decimal       @default(0) @db.Decimal\n  uid          String        @id\n  email        String?       @unique\n  streams      stream[]\n  schedules    schedule[]\n  wallets      wallet[]\n  txns         transaction[]\n}\n\nmodel waitlist {\n  email   String  @id\n  name    String?\n  company String?\n}\n\nmodel wallet {\n  username String\n  network  network_type\n  address  String\n  id       Int          @id @default(autoincrement())\n\n  user user @relation(fields: [username], references: [username])\n\n  @@unique([username, network], map: \"unique_user_network\")\n}\n\nenum interval_type {\n  daily\n  weekly\n  biweekly\n  monthly\n  quarterly\n  semiannual\n  yearly\n}\n\nenum network_type {\n  Base\n  // Arbitrum\n  // Optimism\n}\n\nenum token {\n  USDT\n  USDC\n}\n\nenum stream_state {\n  inactive\n  active\n  paused\n  cancelled\n}\n",
  "inlineSchemaHash": "d0f4d16aaec3c6d6024458e20fa866baa386e1c22d9029174937b0bd2ffc4758",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"organization\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"wallet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plugin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"info\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"network\",\"kind\":\"enum\",\"type\":\"network_type\"},{\"name\":\"streams\",\"kind\":\"object\",\"type\":\"stream\",\"relationName\":\"organizationTostream\"},{\"name\":\"schedules\",\"kind\":\"object\",\"type\":\"schedule\",\"relationName\":\"organizationToschedule\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"transaction\",\"relationName\":\"organizationTotransaction\"}],\"dbName\":null},\"schedule\":{\"fields\":[{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isOneTime\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"org_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nextPayout\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"network\",\"kind\":\"enum\",\"type\":\"network_type\"},{\"name\":\"asset\",\"kind\":\"enum\",\"type\":\"token\"},{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"interval\",\"kind\":\"enum\",\"type\":\"interval_type\"},{\"name\":\"payout\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"scheduleTouser\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"organization\",\"relationName\":\"organizationToschedule\"},{\"name\":\"txns\",\"kind\":\"object\",\"type\":\"transaction\",\"relationName\":\"scheduleTotransaction\"}],\"dbName\":null},\"stream\":{\"fields\":[{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"org_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastPayout\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"network\",\"kind\":\"enum\",\"type\":\"network_type\"},{\"name\":\"asset\",\"kind\":\"enum\",\"type\":\"token\"},{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payout\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"enum\",\"type\":\"stream_state\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"interval\",\"kind\":\"enum\",\"type\":\"interval_type\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"streamTouser\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"organization\",\"relationName\":\"organizationTostream\"},{\"name\":\"txns\",\"kind\":\"object\",\"type\":\"transaction\",\"relationName\":\"streamTotransaction\"}],\"dbName\":null},\"transaction\":{\"fields\":[{\"name\":\"tx_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"asset\",\"kind\":\"enum\",\"type\":\"token\"},{\"name\":\"network\",\"kind\":\"enum\",\"type\":\"network_type\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"recipient\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"org_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stream_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"organization\",\"relationName\":\"organizationTotransaction\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"transactionTouser\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"schedule\",\"relationName\":\"scheduleTotransaction\"},{\"name\":\"stream\",\"kind\":\"object\",\"type\":\"stream\",\"relationName\":\"streamTotransaction\"}],\"dbName\":null},\"user\":{\"fields\":[{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"total_payout\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"uid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"streams\",\"kind\":\"object\",\"type\":\"stream\",\"relationName\":\"streamTouser\"},{\"name\":\"schedules\",\"kind\":\"object\",\"type\":\"schedule\",\"relationName\":\"scheduleTouser\"},{\"name\":\"wallets\",\"kind\":\"object\",\"type\":\"wallet\",\"relationName\":\"userTowallet\"},{\"name\":\"txns\",\"kind\":\"object\",\"type\":\"transaction\",\"relationName\":\"transactionTouser\"}],\"dbName\":null},\"waitlist\":{\"fields\":[{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"wallet\":{\"fields\":[{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"network\",\"kind\":\"enum\",\"type\":\"network_type\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"userTowallet\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

